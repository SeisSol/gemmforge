add_library(${GPU_TARGET} SHARED ${GPU_TARGET_SOURCE_FILES})

if (${DEVICE_BACKEND} STREQUAL "HIPSYCL")
    #ToDo: make also cuda target
    set(HIPSYCL_TARGETS 'cuda:${SM_ARCH}')
    find_package(hipSYCL CONFIG REQUIRED)
    add_sycl_to_target(TARGET ${GPU_TARGET} SOURCES ${GPU_TARGET_SOURCE_FILES})
else()
    if("$ENV{ONEAPI_COMPILER}" STREQUAL "CLANG")
        set(CMAKE_CXX_COMPILER clang++)
    else()
        set(CMAKE_CXX_COMPILER dpcpp)
    endif()

    if("$ENV{PREFERRED_DEVICE_TYPE}" STREQUAL "CPU")
        target_compile_options(${GPU_TARGET} PRIVATE "-fsycl-targets=spir64_x86_64-unknown-unknown-sycldevice")
        set_target_properties(${GPU_TARGET} PROPERTIES LINK_FLAGS "-fsycl-targets=spir64_x86_64-unknown-unknown-sycldevice -Xs \"-march=${SM_ARCH}\"")
    else()
        if(${SM_ARCH} MATCHES "sm_*")
            if(NOT ("$ENV{ONEAPI_COMPILER}" STREQUAL "CLANG"))
                message(FATAL_ERROR "CUDA compilation only with CLANG compiler")
            endif()

            target_compile_options(${GPU_TARGET} PRIVATE "-fsycl" "-fsycl-targets=nvptx64-nvidia-cuda-sycldevice" "-fsycl-unnamed-lambda" "-Xsycl-target-backend" "--cuda-gpu-arch=${DEVICE_SUB_ARCH}")
            set_target_properties(${GPU_TARGET} PROPERTIES LINK_FLAGS "-fsycl -fsycl-targets=nvptx64-nvidia-cuda-sycldevice -Xs \"-device ${DEVICE_SUB_ARCH}\"")
        else()
            target_compile_options(${GPU_TARGET} PRIVATE "-fsycl-targets=spir64_gen-unknown-unknown-sycldevice")
            set_target_properties(${GPU_TARGET} PROPERTIES LINK_FLAGS "-fsycl -fsycl-targets=spir64_gen-unknown-unknown-sycldevice -Xs \"-device ${DEVICE_SUB_ARCH}\"")
        endif()
    endif()
endif()

target_compile_options(${GPU_TARGET} PRIVATE "-std=c++17" "-O3")
target_compile_definitions(${GPU_TARGET} PRIVATE DEVICE_${DEVICE_BACKEND}_LANG REAL_SIZE=${REAL_SIZE})
target_link_libraries(${GPU_TARGET} PUBLIC stdc++fs)